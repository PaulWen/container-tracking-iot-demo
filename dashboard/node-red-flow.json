[
    {
        "id": "858c27a6.24e84",
        "type": "ibmiot in",
        "z": "9ebfe535.8687c8",
        "authentication": "apiKey",
        "apiKey": "a40a04fb.c69218",
        "inputType": "evt",
        "deviceId": "",
        "applicationId": "",
        "deviceType": "iPhone",
        "eventType": "+",
        "commandType": "",
        "format": "json",
        "name": "IBM Watson IoT Platform",
        "service": "registered",
        "allDevices": true,
        "allApplications": "",
        "allDeviceTypes": true,
        "allEvents": true,
        "allCommands": "",
        "allFormats": "",
        "qos": 0,
        "x": 175,
        "y": 357.4999694824219,
        "wires": [
            [
                "1000ebe2.288cc4",
                "132f298c.5d44ce",
                "b70f21cd.ba4a98",
                "163868cc.eec25f",
                "5b3601ad.2e1538"
            ]
        ]
    },
    {
        "id": "c84c583e.1667b",
        "type": "debug",
        "z": "9ebfe535.8687c8",
        "name": "IoT Data to console",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 903.7499694824219,
        "y": 169.10709381103516,
        "wires": []
    },
    {
        "id": "1000ebe2.288cc4",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Parse IoT Data to string",
        "func": "\nreturn {payload: JSON.stringify(msg)};",
        "outputs": 1,
        "noerr": 0,
        "x": 514.9999694824219,
        "y": 170.35709381103516,
        "wires": [
            [
                "c84c583e.1667b"
            ]
        ]
    },
    {
        "id": "28859ce6.4a6dbc",
        "type": "ui_chart",
        "z": "9ebfe535.8687c8",
        "name": "",
        "group": "889cd8a0.349358",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Acceleration",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#00b80a",
            "#1a33ee",
            "#ff0000",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "x": 1591.9639587402344,
        "y": 421.428466796875,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "132f298c.5d44ce",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Extract Gyroscope",
        "func": "let gyroscopeX = {};\nlet gyroscopeY = {};\nlet gyroscopeZ = {};\nlet status = {};\nlet exception = null;\n\ngyroscopeX.y = msg.payload.gyroscope.x;\ngyroscopeX.x = msg.payload.acceleration.time;\n\ngyroscopeY.y = msg.payload.gyroscope.y;\ngyroscopeY.x = msg.payload.acceleration.time;\n\ngyroscopeZ.y = msg.payload.gyroscope.z;\ngyroscopeZ.x = msg.payload.acceleration.time;\n\n\n// die Gyroscopewerte auswerten\nconst min = -2;\nconst max = 2;\n\nif (gyroscopeX.y < min || gyroscopeX.y > max ||\n    gyroscopeY.y < min || gyroscopeY.y > max ||\n    gyroscopeZ.y < min || gyroscopeZ.y > max) {\n    status = {\n        payload: \"Incorrect handling\",\n        deviceId: msg.deviceId\n    };\n    exception = {\n        message: \"Container handeled incorrectly.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.gyroscope.time\n    };\n} else {\n  status = {\n        payload: \"Correct handling\",\n        deviceId: msg.deviceId\n    };\n}\n\nlet gyroscopeDataOutput = {\n    \"gyroscopeData\": [gyroscopeX, gyroscopeY, gyroscopeZ],\n    \"deviceId\": msg.deviceId\n}\n\n// test if only exception data should be stored or if all the data should be stored\nif (flow.get(\"storeAllData\")) {\n    // all data\n    return [gyroscopeDataOutput, status, exception];\n} else {\n    // only exception data\n    if (exception !== null) {\n        return [gyroscopeDataOutput, status, exception];\n    } else {\n        return [null, status, null]\n    }\n}",
        "outputs": "3",
        "noerr": 0,
        "x": 495,
        "y": 397.4999694824219,
        "wires": [
            [
                "ce02d0df.ee5268"
            ],
            [
                "bd9c844d.118298"
            ],
            [
                "e016b933.836e88",
                "5af5b6af.0ce4b8"
            ]
        ],
        "inputLabels": [
            "IoT Data"
        ],
        "outputLabels": [
            "gyroscope data",
            "status",
            "exception"
        ]
    },
    {
        "id": "6f68e662.c4f498",
        "type": "ui_chart",
        "z": "9ebfe535.8687c8",
        "name": "",
        "group": "889cd8a0.349358",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Gyroscope",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#00b80a",
            "#1a33ee",
            "#ff0000",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "x": 1592.3211364746094,
        "y": 500.3570556640625,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "7773a3fb.d0d984",
        "type": "worldmap",
        "z": "9ebfe535.8687c8",
        "name": "Untitled Theme 1",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "OSM",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "true",
        "x": 1608.9287109375,
        "y": 691.7142333984375,
        "wires": []
    },
    {
        "id": "b70f21cd.ba4a98",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Extract Location",
        "func": "let location = {};\n\nlocation.name = msg.deviceId;\nlocation.lat = msg.payload.geolocation.latitude;\nlocation.lon = msg.payload.geolocation.longitude;\nlocation.zoom = 15;\n\nreturn {payload: location};",
        "outputs": 1,
        "noerr": 0,
        "x": 493.7499694824219,
        "y": 581.2499694824219,
        "wires": [
            [
                "7773a3fb.d0d984"
            ]
        ]
    },
    {
        "id": "3356fb79.f7b594",
        "type": "comment",
        "z": "9ebfe535.8687c8",
        "name": "Readme",
        "info": "Das Dashboard kann unter \"/ui\" erreicht werden.\nDie Map mit allen IoT Geräten kann unter \"/worldmap\" eingesehen werden.\n\n\n\nIn den Templates können Angular/Angular-Material directives verwendet werden:\nhttps://material.angularjs.org/latest/api/directive/",
        "x": 126,
        "y": 191.49996948242188,
        "wires": []
    },
    {
        "id": "9f06838e.7ac1d",
        "type": "ui_template",
        "z": "9ebfe535.8687c8",
        "group": "7826b746.ac42e8",
        "name": "Image",
        "order": 1,
        "width": "6",
        "height": "8",
        "format": "<img src=\"{{msg.payload}}\"\n alt='No image available.'\n width=\"200px\"\n>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "templateScope": "local",
        "x": 1564.4642333984375,
        "y": 741.3570556640625,
        "wires": [
            []
        ]
    },
    {
        "id": "b0ccf993.40a1f8",
        "type": "http in",
        "z": "9ebfe535.8687c8",
        "name": "Image Upload",
        "url": "/image-upload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 135,
        "y": 637.4999694824219,
        "wires": [
            [
                "1c9126b6.1fa649",
                "c2e261a5.241f4",
                "3333da42.87fc96"
            ]
        ]
    },
    {
        "id": "685d54e0.c3ce34",
        "type": "ui_dropdown",
        "z": "9ebfe535.8687c8",
        "name": "",
        "label": "Select Device",
        "place": "Select option",
        "group": "c0b7ba95.85b25",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "options": [
            {
                "label": "Container-1",
                "value": "Container-1",
                "type": "str"
            },
            {
                "label": "Container-2",
                "value": "Container-2",
                "type": "str"
            },
            {
                "label": "Container-3",
                "value": "Container-3",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 1878.3927917480469,
        "y": 233.82144165039062,
        "wires": [
            [
                "b31d54b6.81e8"
            ]
        ]
    },
    {
        "id": "9ef74976.1c5c4",
        "type": "ui_template",
        "z": "9ebfe535.8687c8",
        "group": "2395c662.23187a",
        "name": "Device Map",
        "order": 0,
        "width": "0",
        "height": "0",
        "format": "<iframe src=\"/worldmap\" height=600px ></iframe>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1592.6787109375,
        "y": 653.4999084472656,
        "wires": [
            []
        ]
    },
    {
        "id": "c7ff0c6c.44a198",
        "type": "ui_text",
        "z": "9ebfe535.8687c8",
        "group": "c0b7ba95.85b25",
        "order": 3,
        "width": "5",
        "height": "1",
        "name": "Gyroscope Status",
        "label": "Container Handling",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1612.3211364746094,
        "y": 540.3570556640625,
        "wires": []
    },
    {
        "id": "ec7a7f97.3535",
        "type": "ui_text",
        "z": "9ebfe535.8687c8",
        "group": "c0b7ba95.85b25",
        "order": 2,
        "width": "5",
        "height": "1",
        "name": "Acceleration Status",
        "label": "Container orientation",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1612.1424255371094,
        "y": 460.5356140136719,
        "wires": []
    },
    {
        "id": "d7744fa4.fea728",
        "type": "ui_template",
        "z": "9ebfe535.8687c8",
        "group": "ea3da3f.dbc0d6",
        "name": "List of all exceptions",
        "order": 0,
        "width": "15",
        "height": "12",
        "format": "<md-list style>\n    <md-list-item class=\"md-3-line\" ng-repeat=\"exception in msg.exceptions | orderBy:'-time'\">\n        <img src=\"http://images.clipartpanda.com/exception-clipart-136637359138898496exception.svg\" class=\"md-avatar\"/>\n        <div class=\"md-list-item-text\">\n          <h3>{{exception.message}}</h3>\n          <a href=\"\" ng-click=\"send({payload:exception.deviceId}); location.reload();\"><h4>{{exception.deviceId}}</h4></a>\n          <p>\n            {{exception.timeString}}\n          </p>\n        </div>\n    </md-list-item>\n</md-list>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "templateScope": "local",
        "x": 1615.7142028808594,
        "y": 232.8571014404297,
        "wires": [
            [
                "685d54e0.c3ce34",
                "517ce167.26479",
                "b31d54b6.81e8"
            ]
        ]
    },
    {
        "id": "e016b933.836e88",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Store Container Exceptions",
        "func": "// only if the exception includes a valid time it will be processed\nif (msg.time !== undefined) {\n    // get the current list of exceptions\n    let exceptions = flow.get(\"exceptions\") || []; \n    \n    \n    // retrieve privious message\n    let priviousMessage = flow.get(\"priviousMessage\") || [];\n    \n    // check if current message equals privious message\n    if (priviousMessage[msg.deviceId] !== undefined && msg.message.localeCompare(priviousMessage[msg.deviceId].message) === 0) {\n        // abroad exception\n        return [null, null];\n    } else {\n        // save current message as privious message\n        priviousMessage[msg.deviceId] = msg;\n        flow.set(\"priviousMessage\", priviousMessage)\n    }\n    \n    // add timeString to exception\n    msg.timeString = new Date(msg.time).toString();\n    \n    // add exception to global list of exceptions\n    exceptions.push(msg);\n    flow.set(\"exceptions\", exceptions);\n    \n    // prepare notification\n    let notification = {};\n    notification.topic = msg.deviceId + \": \" + msg.message;\n    \n    // send global list of exceptions and notification\n    return [{payload: exceptions}, notification];\n} else {\n    return [null, null];\n}",
        "outputs": "2",
        "noerr": 0,
        "x": 801.14306640625,
        "y": 383.7499084472656,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "list of exceptions",
            "notification"
        ]
    },
    {
        "id": "f5cd3632.be5e1",
        "type": "ibmiot out",
        "z": "9ebfe535.8687c8",
        "authentication": "apiKey",
        "apiKey": "a40a04fb.c69218",
        "outputType": "cmd",
        "deviceId": "Container-2",
        "deviceType": "container",
        "eventCommandType": "takePicture",
        "format": "json",
        "data": "null",
        "qos": 0,
        "name": "Send TakePicture Command to IoT Device",
        "service": "registered",
        "x": 2328.750015258789,
        "y": 881,
        "wires": []
    },
    {
        "id": "1c9126b6.1fa649",
        "type": "http response",
        "z": "9ebfe535.8687c8",
        "name": "Success Response",
        "statusCode": "200",
        "headers": {
            "Access-Control-Allow-Origin": "*"
        },
        "x": 506,
        "y": 710.5,
        "wires": []
    },
    {
        "id": "611cf650.6c7878",
        "type": "ui_button",
        "z": "9ebfe535.8687c8",
        "name": "Take Picture Button",
        "group": "7826b746.ac42e8",
        "order": 0,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "Take Picture",
        "color": "",
        "bgcolor": "",
        "icon": "camera",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "x": 1588.750015258789,
        "y": 881,
        "wires": [
            [
                "c7328a92.2ef01"
            ]
        ]
    },
    {
        "id": "ab0b6f42.c613e8",
        "type": "ui_ui_control",
        "z": "9ebfe535.8687c8",
        "name": "Open Devices Tab",
        "x": 2083.392791748047,
        "y": 129,
        "wires": [
            []
        ]
    },
    {
        "id": "517ce167.26479",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Open Devices Tab",
        "func": "// this function gets called if a message gets send by the priviouse node\n// the node \"List of all exceptions\" sends a message if a Container-ID form the list gets clicked\nreturn {payload:{tab:\"Devices\"}};",
        "outputs": 1,
        "noerr": 0,
        "x": 1874.6427917480469,
        "y": 129,
        "wires": [
            [
                "ab0b6f42.c613e8"
            ]
        ]
    },
    {
        "id": "c7328a92.2ef01",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Set Device to request an image from",
        "func": "// check if msg selects a new device or triggers the \"takePicture\" command\n// in order to trigger the \"takePicture command\"\nreturn {deviceId:flow.get(\"selectedDevice\")};",
        "outputs": 1,
        "noerr": 0,
        "x": 1928.750015258789,
        "y": 881,
        "wires": [
            [
                "f5cd3632.be5e1"
            ]
        ]
    },
    {
        "id": "b31d54b6.81e8",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Store currently selected device globally",
        "func": "// Store currently selected device in flow-context\nflow.set(\"selectedDevice\", msg.payload);\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2148.0354919433594,
        "y": 176.85711669921875,
        "wires": [
            []
        ]
    },
    {
        "id": "22627e53.9c1caa",
        "type": "ui_switch",
        "z": "9ebfe535.8687c8",
        "name": "",
        "label": "Edge analytics",
        "group": "889cd8a0.349358",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "false",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "true",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 1578.750015258789,
        "y": 1001,
        "wires": [
            [
                "19d80b62.61726d"
            ]
        ]
    },
    {
        "id": "163868cc.eec25f",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Extract Acceleration",
        "func": "let accelerationX = {};\nlet accelerationY = {};\nlet accelerationZ = {};\nlet status = {};\nlet exception = null;\n\naccelerationX.y = msg.payload.acceleration.x; \naccelerationX.x = msg.payload.acceleration.time;\n\naccelerationY.y = msg.payload.acceleration.y;\naccelerationY.x = msg.payload.acceleration.time;\n\naccelerationZ.y = msg.payload.acceleration.z;\naccelerationZ.x = msg.payload.acceleration.time;\n\n\n// die Accelerationwerte auswerten\nif (accelerationZ.y > 9) {\n   status = {\n        payload: \"Correct position\",\n        deviceId: msg.deviceId\n    }; \n} else if (accelerationZ.y < -9) {\n    status = {\n        payload: \"Upside down\",\n        deviceId: msg.deviceId\n    };\n    exception = {\n        message: \"Container lies upside down.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.acceleration.time\n    };\n} else if (accelerationX.y > 9) {\n    status = {\n        payload: \"Left side down\",\n        deviceId: msg.deviceId\n    };\n    exception = {\n        message: \"Container lies left side down.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.acceleration.time\n    };\n} else if (accelerationX.y < -9) {\n    status = {\n        payload: \"Right side down\",\n        deviceId: msg.deviceId\n    };\n    exception = {\n        message: \"Container lies right side down.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.acceleration.time\n    };\n} else if (accelerationY.y > 9) {\n    status = {\n        payload: \"Turned forward\",\n        deviceId: msg.deviceId\n    };\n    exception = {\n        message: \"Container is turned forward.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.acceleration.time\n    };\n} else if (accelerationY.y < -9) {\n    status = {\n        payload: \"Turnend backwards\",\n        deviceId: msg.deviceId\n    };\n    exception = {\n        message: \"Container is turnend backwards.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.acceleration.time\n    };\n} else {\n    status = {\n        payload: \"No ground contact\",\n        deviceId: msg.deviceId\n    };\n    exception = {\n        message: \"Container has no ground contact.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.acceleration.time\n    };\n}\n\nlet accelerationDataOutput = {\n    \"accelerationData\": [accelerationX, accelerationY, accelerationZ],\n    \"deviceId\": msg.deviceId\n}\n\n// test if only exception data should be stored or if all the data should be stored\nif (flow.get(\"storeAllData\")) {\n    // all data\n    return [accelerationDataOutput, status, exception];\n} else {\n    // only exception data\n    if (exception !== null) {\n        return [accelerationDataOutput, status, exception];\n    } else {\n        return [null, status, null]\n    }\n}",
        "outputs": "3",
        "noerr": 0,
        "x": 505,
        "y": 297.4999694824219,
        "wires": [
            [
                "d8db10cd.01553"
            ],
            [
                "f41a0455.d7c96"
            ],
            [
                "5af5b6af.0ce4b8",
                "e016b933.836e88"
            ]
        ],
        "inputLabels": [
            "IoT Data"
        ],
        "outputLabels": [
            "Acceleration Data",
            "Status",
            "Exception"
        ]
    },
    {
        "id": "19d80b62.61726d",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Store Data Volume Switch",
        "func": "// Store currently selected device in flow-context\nflow.set(\"storeAllData\", msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "x": 1868.750015258789,
        "y": 1001,
        "wires": [
            []
        ]
    },
    {
        "id": "e7631c9d.075a68",
        "type": "ui_button",
        "z": "9ebfe535.8687c8",
        "name": "",
        "group": "889cd8a0.349358",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Clear Graphs",
        "color": "",
        "bgcolor": "",
        "icon": "delete",
        "payload": "[]",
        "payloadType": "json",
        "topic": "",
        "x": 1594.53564453125,
        "y": 582.7142028808594,
        "wires": [
            [
                "d201bf33.2b4f08"
            ]
        ]
    },
    {
        "id": "5b3601ad.2e1538",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Store List of all IoT Devices",
        "func": "let iotDevicesSet = flow.get(\"iotDevicesSet\") || new Set();\n\n// check if the IoT device is not added to the list yet\nif (!iotDevicesSet.has(iotDevicesSet.add)) {\n    // add it to the list\n    iotDevicesSet.add(msg.deviceId);\n    // update the list\n    flow.set(\"iotDevicesSet\", iotDevicesSet);\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 801.142822265625,
        "y": 222.89283752441406,
        "wires": [
            []
        ]
    },
    {
        "id": "c0d484a0.6c4e8",
        "type": "ui_template",
        "z": "9ebfe535.8687c8",
        "group": "19b928fd.f06db7",
        "name": "List of all IoT Devices",
        "order": 0,
        "width": "6",
        "height": "14",
        "format": "<md-list style>\n    <md-list-item class=\"md-3-line\" ng-repeat=\"device in msg.listOfDevices\">\n        <img ng-hide=\"!msg.exceptionStatusOfDevices[device]\" src=\"https://upload.wikimedia.org/wikipedia/commons/f/f1/Ski_trail_rating_symbol_red_circle.png\" class=\"md-avatar\"/>\n        <img ng-hide=\"msg.exceptionStatusOfDevices[device]\" src=\"https://cdn-images-1.medium.com/max/512/1*nZ9VwHTLxAfNCuCjYAkajg.png\" class=\"md-avatar\"/>\n        <div class=\"md-list-item-text\">\n          <a href=\"\" ng-click=\"send({payload:device}); location.reload();\"><h3>{{device}}</h3></a>\n        </div>\n    </md-list-item>\n</md-list>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "templateScope": "local",
        "x": 1616.1785583496094,
        "y": 189.49996948242188,
        "wires": [
            [
                "685d54e0.c3ce34",
                "517ce167.26479",
                "b31d54b6.81e8"
            ]
        ]
    },
    {
        "id": "8da06cfd.b8f1f8",
        "type": "inject",
        "z": "9ebfe535.8687c8",
        "name": "Remove all data",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 166.62855529785156,
        "y": 789.1999816894531,
        "wires": [
            [
                "5ccf795d.def5a"
            ]
        ]
    },
    {
        "id": "5ccf795d.def5a",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Remove all data",
        "func": "flow.set(\"exceptions\", undefined);\nflow.set(\"iotDeviceExceptionStatus\", undefined);\nflow.set(\"iotDevicesSet\", undefined);\nflow.set(\"selectedDevice\", undefined);\nflow.set(\"priviousMessage\", undefined);\nflow.set(\"accelerationData\", undefined);\nflow.set(\"gyroscopeData\", undefined);\nflow.set(\"imageData\", undefined);\nflow.set(\"accelerationStatusData\", undefined);\nflow.set(\"gyroscopeStatusData\", undefined);\n\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 400.62855529785156,
        "y": 789.9000549316406,
        "wires": [
            []
        ]
    },
    {
        "id": "5af5b6af.0ce4b8",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Store Exception status of all IoT devices",
        "func": "// only if the exception includes a valid time it will be processed\nif (msg.time !== undefined) {\n    let iotDeviceExceptionStatus = flow.get(\"iotDeviceExceptionStatus\") || {};\n    \n    // update the status of the specific device\n    iotDeviceExceptionStatus[msg.deviceId] = true; \n    \n    // save the iotDeviceExceptionStatus data\n    flow.set(\"iotDeviceExceptionStatus\", iotDeviceExceptionStatus);\n}\n\n return null;",
        "outputs": 1,
        "noerr": 0,
        "x": 839.3785400390625,
        "y": 345.9356689453125,
        "wires": [
            []
        ]
    },
    {
        "id": "a28d731f.a1647",
        "type": "ui_template",
        "z": "9ebfe535.8687c8",
        "group": "c0b7ba95.85b25",
        "name": "List of all exceptions of the current device",
        "order": 6,
        "width": "7",
        "height": "7",
        "format": "<md-list style>\n    <md-list-item class=\"md-3-line\" ng-repeat=\"exception in msg.exceptions | filter:msg.selectedDevice | orderBy:'-time'\">\n        <img src=\"http://images.clipartpanda.com/exception-clipart-136637359138898496exception.svg\" class=\"md-avatar\"/>\n        <div class=\"md-list-item-text\">\n          <h3>{{exception.message}}</h3>\n          <p>\n            {{exception.timeString}}\n          </p>\n        </div>\n    </md-list-item>\n</md-list>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "templateScope": "local",
        "x": 1677.7500915527344,
        "y": 323.7785186767578,
        "wires": [
            []
        ]
    },
    {
        "id": "f52007e3.1e8c98",
        "type": "ui_button",
        "z": "9ebfe535.8687c8",
        "name": "",
        "group": "c0b7ba95.85b25",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Clear Exceptions",
        "color": "",
        "bgcolor": "",
        "icon": "delete",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 1607.0210876464844,
        "y": 367.1641845703125,
        "wires": [
            [
                "38b80a6e.391b4e"
            ]
        ]
    },
    {
        "id": "ddda715a.f2ca28",
        "type": "ui_text",
        "z": "9ebfe535.8687c8",
        "group": "c0b7ba95.85b25",
        "order": 5,
        "width": "7",
        "height": "1",
        "name": "",
        "label": "Exceptions:",
        "format": "",
        "layout": "row-spread",
        "x": 1587.8786010742188,
        "y": 780.5500183105469,
        "wires": []
    },
    {
        "id": "38b80a6e.391b4e",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Remove Exceptions of selected device and reset exception status",
        "func": "let selectedDevice = flow.get(\"selectedDevice\");\n\n\n// delete exceptions of the selected device\nlet exceptions = flow.get(\"exceptions\");\n\nfor (let i = exceptions.length - 1; i >= 0; i--) {\n    if (exceptions[i].deviceId === selectedDevice) { \n        exceptions.splice(i, 1);\n    }\n}\n\nflow.set(\"exceptions\", exceptions);\n\n\n\n\n// reset exception status of the currently selected device\nlet iotDeviceExceptionStatus = flow.get(\"iotDeviceExceptionStatus\");\n\niotDeviceExceptionStatus[selectedDevice] = undefined;\n\nflow.set(\"iotDeviceExceptionStatus\", iotDeviceExceptionStatus);",
        "outputs": 1,
        "noerr": 0,
        "x": 1986.02099609375,
        "y": 367.2142028808594,
        "wires": [
            []
        ]
    },
    {
        "id": "a83b63e0.977c48",
        "type": "inject",
        "z": "9ebfe535.8687c8",
        "name": "Reload UI",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "0.4",
        "crontab": "",
        "once": true,
        "x": 1034.8035583496094,
        "y": 410.5624694824219,
        "wires": [
            [
                "a818a7bd.824378",
                "edb495bd.1ed0c",
                "6912bb3b.342f54",
                "2f1632c3.1704ae",
                "5ae0cce5.bfb3fc",
                "1c50d2ac.26f2cd",
                "c97ef670.1e7f88"
            ]
        ]
    },
    {
        "id": "a818a7bd.824378",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Load list of all devices",
        "func": "\n\nreturn {\"listOfDevices\":Array.from(flow.get(\"iotDevicesSet\") || new Set()), \"exceptionStatusOfDevices\": flow.get(\"iotDeviceExceptionStatus\")};",
        "outputs": 1,
        "noerr": 0,
        "x": 1257.3035583496094,
        "y": 191.43748474121094,
        "wires": [
            [
                "c0d484a0.6c4e8"
            ]
        ]
    },
    {
        "id": "edb495bd.1ed0c",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Load list of all exceptions",
        "func": "return {\n    \"exceptions\":flow.get(\"exceptions\"),\n    \"selectedDevice\":flow.get(\"selectedDevice\")\n};",
        "outputs": 1,
        "noerr": 0,
        "x": 1261.0535583496094,
        "y": 256.43748474121094,
        "wires": [
            [
                "d7744fa4.fea728",
                "a28d731f.a1647"
            ]
        ]
    },
    {
        "id": "6912bb3b.342f54",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Load Acceleration Data of Selected Device",
        "func": "let selectedDevice = flow.get(\"selectedDevice\");\nlet accelerationData = flow.get(\"accelerationData\");\n\n// check if acceleration data already exists for the selected device\nif (accelerationData !== undefined && selectedDevice !== undefined && accelerationData[selectedDevice] !== undefined) {\n return {\"payload\":accelerationData[selectedDevice]};   \n} else {\n    return {\"payload\":[]};\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1302.857177734375,
        "y": 382.71429443359375,
        "wires": [
            [
                "28859ce6.4a6dbc"
            ]
        ]
    },
    {
        "id": "d8db10cd.01553",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Store Acceleration Data",
        "func": "// get all the acceleration data\nlet accelerationData = flow.get(\"accelerationData\") || {};\n\n// if their is currently no data stored about the device, than the data has to be initialized\nif (accelerationData[msg.deviceId] === undefined) {\n    accelerationData[msg.deviceId] = [{\n        \"series\": [\"x\", \"y\", \"z\"],\n        \"data\": [[], [], []],\n        \"labels\": []\n    }]\n}\n\n// store the new data\naccelerationData[msg.deviceId][0].data[0].push(msg.accelerationData[0]);\naccelerationData[msg.deviceId][0].data[1].push(msg.accelerationData[1]);\naccelerationData[msg.deviceId][0].data[2].push(msg.accelerationData[2]);\n\n// remove old data so that only 60 elements are stored at a time\nif (accelerationData[msg.deviceId][0].data[0].length > 60) {\n    // remove first element\n    accelerationData[msg.deviceId][0].data[0].shift();\n    accelerationData[msg.deviceId][0].data[1].shift();\n    accelerationData[msg.deviceId][0].data[2].shift();\n}\n\n\nflow.set(\"accelerationData\", accelerationData)\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 789.8570556640625,
        "y": 264.142822265625,
        "wires": [
            []
        ]
    },
    {
        "id": "ce02d0df.ee5268",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Store Gyroscope Data",
        "func": "// get all the gyroscope data\nlet gyroscopeData = flow.get(\"gyroscopeData\") || {};\n\n// if their is currently no data stored about the device, than the data has to be initialized\nif (gyroscopeData[msg.deviceId] === undefined) {\n    gyroscopeData[msg.deviceId] = [{\n        \"series\": [\"x\", \"y\", \"z\"],\n        \"data\": [[], [], []],\n        \"labels\": []\n    }]\n}\n\n// store the new data\ngyroscopeData[msg.deviceId][0].data[0].push(msg.gyroscopeData[0]);\ngyroscopeData[msg.deviceId][0].data[1].push(msg.gyroscopeData[1]);\ngyroscopeData[msg.deviceId][0].data[2].push(msg.gyroscopeData[2]);\n\n// remove old data so that only 60 elements are stored at a time\nif (gyroscopeData[msg.deviceId][0].data[0].length > 60) {\n    // remove first element\n    gyroscopeData[msg.deviceId][0].data[0].shift();\n    gyroscopeData[msg.deviceId][0].data[1].shift();\n    gyroscopeData[msg.deviceId][0].data[2].shift();\n}\n\n\nflow.set(\"gyroscopeData\", gyroscopeData)\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 783,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "2f1632c3.1704ae",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Load Gyroscope Data of Selected Device",
        "func": "let selectedDevice = flow.get(\"selectedDevice\");\nlet gyroscopeData = flow.get(\"gyroscopeData\");\n\n// check if gyroscope data already exists for the selected device\nif (gyroscopeData !== undefined && selectedDevice !== undefined && gyroscopeData[selectedDevice] !== undefined) {\n return {\"payload\":gyroscopeData[selectedDevice]};   \n} else {\n    return {\"payload\":[]};\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1297,
        "y": 512,
        "wires": [
            [
                "6f68e662.c4f498"
            ]
        ]
    },
    {
        "id": "d201bf33.2b4f08",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Remove Acceleration and Gyroscope Data of selected device",
        "func": "let selectedDevice = flow.get(\"selectedDevice\");\n\n\n// delete acceleration data of the selected device\nlet accelerationData = flow.get(\"accelerationData\");\naccelerationData[selectedDevice] = undefined;\nflow.set(\"accelerationData\", accelerationData);\n\n\n\n// delete gyroscope data of the selected device\nlet gyroscopeData = flow.get(\"gyroscopeData\");\ngyroscopeData[selectedDevice] = undefined;\nflow.set(\"gyroscopeData\", gyroscopeData);",
        "outputs": 1,
        "noerr": 0,
        "x": 1947,
        "y": 579,
        "wires": [
            []
        ]
    },
    {
        "id": "c2e261a5.241f4",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Store Image Data",
        "func": "// get all the image data\nlet imageData = flow.get(\"imageData\") || {};\n\n// store the image\nimageData[msg.payload.deviceId] = msg.payload.image;\n\nflow.set(\"imageData\", imageData)\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 772,
        "y": 641,
        "wires": [
            []
        ]
    },
    {
        "id": "5ae0cce5.bfb3fc",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Load Image",
        "func": "let selectedDevice = flow.get(\"selectedDevice\");\nlet imageData = flow.get(\"imageData\") || {};\n\n// check if their is an image for the selected deivce\nif (imageData[selectedDevice] !== undefined) {\n    return {\"payload\":imageData[selectedDevice]};   \n} else {\n    return {\"payload\":\"\"};\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1216,
        "y": 739,
        "wires": [
            [
                "9f06838e.7ac1d"
            ]
        ]
    },
    {
        "id": "f41a0455.d7c96",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Store Acceleration Status",
        "func": "// get all the acceleration status data\nlet accelerationStatusData = flow.get(\"accelerationStatusData\") || {};\n\n// store the acceleration status data\naccelerationStatusData[msg.deviceId] = msg.payload;\n\nflow.set(\"accelerationStatusData\", accelerationStatusData)\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 795,
        "y": 306,
        "wires": [
            []
        ]
    },
    {
        "id": "1c50d2ac.26f2cd",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Load Acceleration Status",
        "func": "let selectedDevice = flow.get(\"selectedDevice\");\nlet accelerationStatusData = flow.get(\"accelerationStatusData\") || {};\n\n// check if their is a gyroscope status for the selected deivce\nif (accelerationStatusData[selectedDevice] !== undefined) {\n    return {\"payload\": accelerationStatusData[selectedDevice]};   \n} else {\n    return {\"payload\":\"-\"};\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1252,
        "y": 461,
        "wires": [
            [
                "ec7a7f97.3535"
            ]
        ]
    },
    {
        "id": "bd9c844d.118298",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Store Gyroscope Status",
        "func": "// get all the gyroscope status data\nlet gyroscopeStatusData = flow.get(\"gyroscopeStatusData\") || {};\n\n// store the gyroscope status data\ngyroscopeStatusData[msg.deviceId] = msg.payload;\n\nflow.set(\"gyroscopeStatusData\", gyroscopeStatusData)\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 795,
        "y": 422,
        "wires": [
            []
        ]
    },
    {
        "id": "c97ef670.1e7f88",
        "type": "function",
        "z": "9ebfe535.8687c8",
        "name": "Load Gyroscope Status",
        "func": "let selectedDevice = flow.get(\"selectedDevice\");\nlet gyroscopeStatusData = flow.get(\"gyroscopeStatusData\") || {};\n\n// check if their is a gyroscope status for the selected deivce\nif (gyroscopeStatusData[selectedDevice] !== undefined) {\n    return {\"payload\": gyroscopeStatusData[selectedDevice]};   \n} else {\n    return {\"payload\":\"-\"};\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1245,
        "y": 559,
        "wires": [
            [
                "c7ff0c6c.44a198"
            ]
        ]
    },
    {
        "id": "3333da42.87fc96",
        "type": "debug",
        "z": "9ebfe535.8687c8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 960.5,
        "y": 673.5,
        "wires": []
    },
    {
        "id": "a40a04fb.c69218",
        "type": "ibmiot",
        "z": "",
        "name": "Dashboard API Key (rgiw9i)",
        "keepalive": "60",
        "serverName": "rgiw9i.messaging.internetofthings.ibmcloud.com",
        "cleansession": true,
        "appId": "",
        "shared": false
    },
    {
        "id": "889cd8a0.349358",
        "type": "ui_group",
        "z": "",
        "name": "IoT Device Data",
        "tab": "373677e7.5dcd88",
        "order": 3,
        "disp": true,
        "width": "10"
    },
    {
        "id": "7826b746.ac42e8",
        "type": "ui_group",
        "z": "",
        "name": "Image",
        "tab": "373677e7.5dcd88",
        "order": 2,
        "disp": true,
        "width": "6"
    },
    {
        "id": "c0b7ba95.85b25",
        "type": "ui_group",
        "z": "",
        "name": "Device",
        "tab": "373677e7.5dcd88",
        "order": 1,
        "disp": true,
        "width": "7"
    },
    {
        "id": "2395c662.23187a",
        "type": "ui_group",
        "z": "",
        "name": "Map",
        "tab": "373677e7.5dcd88",
        "order": 4,
        "disp": true,
        "width": "6"
    },
    {
        "id": "ea3da3f.dbc0d6",
        "type": "ui_group",
        "z": "",
        "name": "List of all Exceptions",
        "tab": "9138baa2.5343c",
        "order": 2,
        "disp": true,
        "width": "15"
    },
    {
        "id": "19b928fd.f06db7",
        "type": "ui_group",
        "z": "",
        "name": "Container Overview",
        "tab": "9138baa2.5343c",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "373677e7.5dcd88",
        "type": "ui_tab",
        "z": "",
        "name": "Devices",
        "icon": "phone_iphone",
        "order": 2
    },
    {
        "id": "9138baa2.5343c",
        "type": "ui_tab",
        "z": "",
        "name": "Home",
        "icon": "home",
        "order": 1
    }
]
